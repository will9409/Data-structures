#include <stdio.h>
#include <stdlib.h>

typedef int element;
typedef struct ListNode {
	element data;
	struct ListNode *link;
} ListNode;

void insert_node(ListNode **phead, ListNode *p, ListNode *new_node)
{	// phead : pointing head pointer(head), p : new node will be inserted behind p
	if(*phead == NULL) {			// If head is NULL, insert new node into empty list
		new_node->link = NULL;
		*phead = new_node;
	}
	else if(p == NULL){			// If p is NULL, insert new node to front of the list
		new_node->link = *phead;
		*phead = new_node;
	}
	else {					// Normal case : insert to next location of p
		new_node->link = p->link;
		p->link = new_node;
	}
	// In this function, headpointer will be changed, so **head needed
}

void remove_node(ListNode **phead, ListNode *p, ListNode *removed)
{
	if( p == NULL )				// If p is NULL, remove the first node
		*phead = (*phead)->link;
	else					// If p != NULL, the node(in front of the removed)'s link
		p->link = removed->link;        // = e next node of removed

	free(removed);
}

void display(ListNode *head)			// Iterative display
{
	ListNode *p = head;
	while( p != NULL ){
		printf("%d->",p->data);
		p = p->link;
	}
	printf("\n");
}

void display_recur(ListNode *head)		// Recursive display
{
	ListNode *p = head;
	if ( p != NULL ){
		printf("%d->", p->data);
		display_recur(p->link);
	}
}

ListNode *search(ListNode *head, int x)
{
	ListNode *p;
	p = head;
	while( p != NULL ){
		if( p->data == x ) return p;	// Search success
		p = p->link;
	}
	return p;				// If search fails, return NULL
}

ListNode *concat(ListNode *head1, ListNode *head2)	// 2 list concatenation
{
	ListNode *p;
	if( head1 == NULL ) return head2;
	else if( head2 == NULL ) return head1;
	else {
		p = head1;
		while( p->link != NULL )
			p = p->link;
		p->link = head2;
		return head1;
	}
}

ListNode *reverse(ListNode *head)
{
	ListNode *p, *q, *r;			// Use p, q, r to iterate
	p = head;				// List which gonna be reversed
	q = NULL;				// Node which gonna be reversed
	while( p != NULL ){
		r = q;				// r : reversed list, r follows q, q follows p
		q = p;
		p = p->link;
		q->link = r;			// Change the links direction
	}
	return q;				//q : reversed list's head pointer
}
/******************************************************************************/
// for Circular linked list
void insert_first(ListNode **phead, ListNode *node)
{
	if( *phead == NULL ){
		*phead = node;
		node->link = node;
	}
	else {
		node->link = (*phead)->link;
		(*phead)->link = node;
	}
}

void insert_last(ListNode **phead, ListNode *node)
{
	if( *phead == NULL ){
		*phead = node;
		node->link = node;
	}
	else {
		node->link = (*phead)->link;
		(*phead)->link = node;
		*phead = node;
	}
}
/******************************************************************************/

int main()
{
	// Generation of a list
	ListNode *p1;
	p1 = (ListNode *)malloc(sizeof(ListNode));

}
